#+TITLE: Doom Emacs
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: Artem's personal config for Doom Emacs
#+STARTUP: overview

* Table of Contents :toc:
- [[#introduction-to-the-config][Introduction to the Config]]
  - [[#personal-info][Personal Info]]
- [[#ui][UI]]
  - [[#interface][Interface]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#dashboard][Dashboard]]
- [[#behavior][Behavior]]
  - [[#which-key][Which-key]]
  - [[#password-store][Password Store]]
  - [[#exit-confirmation][Exit Confirmation]]
  - [[#projectile][Projectile]]
  - [[#windows][Windows]]
  - [[#scrolling][Scrolling]]
- [[#navigation][Navigation]]
  - [[#neotree][Neotree]]
  - [[#dired][Dired]]
  - [[#evil-mode][Evil Mode]]
  - [[#splits][Splits]]
  - [[#mouse-support][Mouse Support]]
- [[#lsp][LSP]]
  - [[#org-mode][ORG Mode]]
  - [[#vim][Vim]]
- [[#keybindings][Keybindings]]
  - [[#org-mode-1][Org Mode]]
  - [[#buffers-and-bookmarks][Buffers and Bookmarks]]
  - [[#inserts][Inserts]]
- [[#additional-notes][Additional Notes]]

* Introduction to the Config

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Personal Info

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp
(setq user-full-name "Artem Smaznov")
#+end_src

* UI
** Interface

This determines the style of line numbers in effect.
If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

Set width of window dividers

#+begin_src emacs-lisp
(setq window-divider-default-right-width 6)
#+end_src

** Theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+end_src

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.
+ 'global-prettify-symbols-mode' -- change certain keywords to symbols, such as lambda!

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Hack Nerd Font Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "Hack Nerd Font Mono" :size 18))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(setq global-prettify-symbols-mode t)
#+end_src

*** Emojis

Emojify is an Emacs extension to display emojis. It can display GitHub style emojis like :smile: or plain ASCII ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** Modeline

#+begin_src emacs-lisp
(after! doom-modeline
  (remove-hook 'doom-modeline-mode-hook #'size-indication-mode) ; filesize in modeline
  (setq doom-modeline-major-mode-icon t)
  )
#+end_src

** Dashboard

Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.


#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "There is no place like home!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;; (setq dashboard-startup-banner "~/.config/doom/doom-emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 10)
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))
#+end_src

This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(setq doom-fallback-buffer "*dashboard*"
      doom-fallback-buffer-name "*dashboard*")
#+end_src

* Behavior
** Which-key

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.4)
#+end_src

** Password Store

Uses the standard Unix password store "pass".

#+begin_src emacs-lisp
;; (use-package! password-store)
#+end_src

** Exit Confirmation

#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package! projectile
  :init
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src

** Windows

#+begin_src emacs-lisp
(setq split-width-threshold 0
      split-height-threshold nil)
#+end_src

** Scrolling

#+begin_src emacs-lisp
(setq scroll-margin 7)
#+end_src

* Navigation
** Neotree

Neotree is a file tree viewer. When you open neotree, it jumps to the current file thanks to neo-smart-open. The neo-window-fixed-size setting makes the neotree width be adjustable. Doom Emacs had no keybindings set for neotree. Since Doom Emacs uses ‘SPC t’ for ‘toggle’ keybindings, I used ‘SPC t n’ for toggle-neotree.

#+begin_src emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))

(map! :leader
      :desc "Neotree" "t n" #'neotree-toggle
      :desc "Open directory in neotree" "d n" #'neotree-dir)

(map! :map neotree-mode-map
      :n "h" #'+neotree/collapse-or-up
      :n "l" #'+neotree/expand-or-open
      :n "s" #'neotree-enter-horizontal-split
      :n "v" #'neotree-enter-vertical-split
      )
#+end_src

** Dired

#+begin_src emacs-lisp
(map! :map dired-mode-map
      :n "<backspace>" 'dired-up-directory
      :n "h" 'dired-up-directory
      :n "l"  'dired-open-file)
#+end_src

** Evil Mode

#+begin_src emacs-lisp
(use-package! evil
  :config
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join))
#+end_src

** Splits

I set splits to default to opening on the right using ‘prefer-horizontal-split’. I set a keybinding for ‘clone-indirect-buffer-other-window’ for when I want to have the same document in two splits. The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other. But in all other respects, the indirect buffer and its base buffer are completely separate. For example, I can fold one split but other will be unfolded.

#+begin_src emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window)
#+end_src

** Mouse Support

#+begin_src emacs-lisp
(xterm-mouse-mode 1)
#+end_src

* LSP
** ORG Mode
*** Paths

#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/Org")

(after! org
  (setq org-agenda-files '("~/Documents/Org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-journal-dir "~/Documents/Org/journal/"
        org-journal-date-format "%B %d, %Y (%A) "
        org-journal-file-format "%Y-%m-%d.org"
        ))
#+end_src

*** Setup

#+begin_src emacs-lisp
(after! org
  (add-hook 'org-mode-hook (lambda ()
                             (org-bullets-mode 1)
                             (display-line-numbers-mode 0)))
  (setq org-ellipsis " ▼ "
        org-agenda-start-with-log-mode t
        org-log-into-drawer t
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/"))))
#+end_src

*** Headings

Setting the font sizes for each header level in Org mode.

#+begin_src emacs-lisp
(after! org
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   ))
#+end_src

*** Pretty Symbols

#+begin_src emacs-lisp
(defun my/org-mode/load-prettify-symbols () "Prettify org mode keywords"
       (interactive)
       (setq prettify-symbols-alist
             (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                     '(("#+begin_src" . ?)
                       ("#+end_src" . ?)
                       ("#+begin_example" . ?)
                       ("#+end_example" . ?)
                       ("#+DATE:" . ?⏱)
                       ("#+AUTHOR:" . ?✏)
                       ("[ ]" .  ?☐)
                       ("[X]" . ?☑ )
                       ("[-]" . ?❍ )
                       ("lambda" . ?λ)
                       ("#+header:" . ?)
                       ("#+name:" . ?﮸)
                       ("#+results:" . ?)
                       ("#+call:" . ?)
                       (":properties:" . ?)
                       (":logbook:" . ?))))
       (prettify-symbols-mode 1))
#+end_src

*** Manpage
We need ox-man for "Org eXporting" to manpage format.

#+BEGIN_SRC emacs-lisp
(use-package ox-man)
(use-package ox-gemini)
#+END_SRC

*** Refiling

#+begin_src emacs-lisp
(setq org-refile-targets
      '("archive.org" :maxlevel .1))
#+end_src

Save all org buffers after a refile

#+begin_src emacs-lisp
(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

*** Unix Configs Support

#+begin_src emacs-lisp
(push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

*** Babel

#+begin_src emacs-lisp
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("js" . "src javascript"))
(add-to-list 'org-structure-template-alist '("lu" . "src lua"))
#+end_src

Auto-tangle on save

#+begin_src emacs-lisp
;; (defun efs/org-babel-tagle-config ()
;;   (when (string-equal (buffer-file-name)
;;                       (expand-file-name "some org file location"))
;;     (let ((org-confirm-babel-evaluate nil))
;;       (org-babel-tangle))))

;;   (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Vim

Enable syntax highlighting for .vim files

#+begin_src emacs-lisp
(require 'vimrc-mode)
(add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
(add-hook 'vimrc-mode-hook #'lsp)
#+end_src

* Keybindings
** Org Mode

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
#+end_src

** Buffers and Bookmarks

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+end_src

** Inserts

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("i". "insert")
       :desc "Toilet pagga" "t" (cmd! (evil-ex "R!toilet -f pagga "))))
#+end_src

* Additional Notes

Here are some additional functions/macros that could help you configure Doom:

#+BEGIN_SRC emacs-lisp
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
(when (file-exists-p "local.el")
  (load! "local.el"))
#+END_SRC

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

