#+title:       Doom Emacs
#+author:      Artem Smaznov
#+description: Emacs is to Vim as Vim is to Notepad
#+startup:     overview

* Table of Contents :toc:
- [[#introduction-to-the-config][Introduction to the Config]]
- [[#global-options][Global Options]]
- [[#fonts][Fonts]]
- [[#core][Core]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#dired][Dired]]
  - [[#evil-mode][Evil Mode]]
  - [[#which-key][Which Key]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-bullets][Org Bullets]]
  - [[#org-auto-tangle][Org Auto Tangle]]
  - [[#ox][Ox]]
- [[#office-tools][Office Tools]]
  - [[#authinfo][AuthInfo]]
  - [[#presentations][Presentations]]
  - [[#calendar][Calendar]]
  - [[#email][Email]]
  - [[#ledger][Ledger]]
- [[#development-tools][Development Tools]]
  - [[#magit][Magit]]
  - [[#projectile][Projectile]]
  - [[#treemacs][Treemacs]]
  - [[#completion][Completion]]
  - [[#ivy][Ivy]]
  - [[#rotate-text][Rotate Text]]
  - [[#indent-guides][Indent Guides]]
  - [[#rainbow-mode][Rainbow Mode]]
- [[#lsp][LSP]]
  - [[#lsp-mode][LSP Mode]]
  - [[#javascript][JavaScript]]
  - [[#python][Python]]
  - [[#groovy][Groovy]]
  - [[#cucumber][Cucumber]]
  - [[#vim][Vim]]
  - [[#logs][Logs]]
- [[#spell-checking][Spell Checking]]
- [[#global-keybindings][Global Keybindings]]
- [[#local-overwrite][Local Overwrite]]
- [[#additional-notes][Additional Notes]]

* Introduction to the Config
Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Personal Info
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(when (file-exists-p (expand-file-name "personal.el" doom-private-dir))
  (load! (expand-file-name "personal.el" doom-private-dir))
  )
#+end_src

* Global Options
#+begin_src emacs-lisp
(setq
 doom-theme 'doom-gruvbox
 display-line-numbers-type 'relative
 scroll-margin 2
 window-divider-default-right-width 6 ;; set width of window dividers
 split-height-threshold nil ;; HACK diable to allow peep-dired to work (prefered 0)
 confirm-kill-emacs nil)

(xterm-mouse-mode 1)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.
+ 'global-prettify-symbols-mode' -- change certain keywords to symbols, such as lambda!

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src emacs-lisp
(setq
 doom-font                (font-spec :family "Hack Nerd Font Mono" :size 16)
 doom-variable-pitch-font (font-spec :family "Hack Nerd Font Mono" :size 18)
 global-prettify-symbols-mode t)

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(use-package! doom-themes
  :config
  (setq
   doom-themes-enable-bold t
   doom-themes-enable-italic t))

(use-package! emojify
  :hook (after-init . global-emojify-mode))
#+end_src

* Core
** Dashboard
*** Doom Dashboard
#+begin_src emacs-lisp
(setq fancy-splash-image (expand-file-name "doom-logo.png" doom-user-dir))
#+end_src

*** Emacs Dashboard
# Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

# #+begin_src emacs-lisp
# (use-package! dashboard
#   :init      ;; tweak dashboard config before loading it
#   (setq
#    dashboard-set-heading-icons t
#    dashboard-set-file-icons t
#    dashboard-page-separator "\n \n"
#    dashboard-banner-logo-title "There is no place like home!"
#    ;; dashboard-startup-banner 'logo ;; use standard emacs logo as banner
#    ;; dashboard-startup-banner "~/.config/doom/doom-emacs-logo.txt"  ;; use doom dashboard ASCII banner
#    dashboard-startup-banner "~/.config/doom/doom-logo.png"  ;; use custom image as banner
#    dashboard-center-content t ;; set to 't' for centered content
#    dashboard-items '(
#                      (recents . 10)
#                      (agenda . 5 )
#                      (bookmarks . 5)
#                      (projects . 5)
#                      (registers . 5)
#                      )
#    )

#   :config
#   (dashboard-setup-startup-hook)
#   (dashboard-modify-heading-icons '(
#                                     (recents . "file-text")
#                                     (bookmarks . "book")
#                                     )))
# #+end_src

# This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

# #+begin_src emacs-lisp
# (setq
#  doom-fallback-buffer "*dashboard*"
#  doom-fallback-buffer-name "*dashboard*"
#  )
# #+end_src
** Modeline
#+begin_src emacs-lisp
(use-package! doom-modeline
  :config
  (remove-hook 'doom-modeline-mode-hook #'size-indication-mode) ; filesize in modeline
  (setq doom-modeline-major-mode-icon t))
#+end_src

** Dired
#+begin_src emacs-lisp
(use-package! dired
  :commands (dired dired-jump)
  :config
  (map! :map dired-mode-map
        :n "h" #'dired-up-directory
        :n "l" #'dired-find-file
        :n "S" #'dired-do-symlink
        :n "-" #'dired-create-empty-file))
#+end_src

Toggle hidden files in Dired
#+begin_src emacs-lisp
(use-package! dired-hide-dotfiles
  :after dired
  :hook (dired-mode . dired-hide-dotfiles-mode)

  :config
  (map! :map dired-mode-map
        :desc "Hide dot files"   :n "zo" (lambda () (interactive) (dired-hide-dotfiles-mode 0))
        :desc "Show dot files"   :n "zm" (lambda () (interactive) (dired-hide-dotfiles-mode 1))
        :desc "Toggle dot files" :n "za" #'dired-hide-dotfiles-mode
        :desc "Toggle dot files" :n "z." #'dired-hide-dotfiles-mode))
#+end_src

Peep
#+begin_src emacs-lisp
(use-package! peep-dired
  :after dired
  :config
  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  (map! :map dired-mode-map
        :n "p" #'peep-dired)
  (map! :map peep-dired-mode-map
        :n "k" #'peep-dired-prev-file
        :n "j" #'peep-dired-next-file
        :n "C-k" #'peep-dired-scroll-page-up
        :n "C-j" #'peep-dired-scroll-page-down)

  (setq
   peep-dired-cleanup-eagerly nil
   peep-dired-cleanup-on-disable t))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
(use-package! evil
  :config
  (map! :map evil-insert-state-map
        :i "<C-h>" #'evil-delete-backward-char-and-join)

  (setq evil-cross-lines t))
#+end_src

** Which Key
#+begin_src emacs-lisp
(use-package! which-key
  :init (setq which-key-idle-delay 0.4))
#+end_src

* Org Mode
** Org
#+begin_src emacs-lisp
(use-package! org
  :init (setq
         org-directory (if IS-MAC "~/Documents/org"
                         (expand-file-name "org" (xdg-user-dir "DOCUMENTS")))
         org-agenda-files          (list org-directory)
         org-default-notes-file    (expand-file-name "notes.org" org-directory)
         +org-capture-journal-file (expand-file-name "journal.org" org-directory)
         org-archive-location      (expand-file-name "archive.org::datetree/" org-directory)) ;; can also use "archive.org::datetrea/* %s"

  :hook (org-mode . (lambda ()
                      (make-local-variable 'display-line-numbers)
                      (setq display-line-numbers 'visual)))

  :config
  (map! :map org-mode-map
        :nv "<M-up>"    #'drag-stuff-up
        :nv "<M-down>"  #'drag-stuff-down
        :nv "<M-left>"  #'drag-stuff-left
        :nv "<M-right>" #'drag-stuff-right
        :n  "<up>"      #'evil-previous-visual-line
        :n  "<down>"    #'evil-next-visual-line)

  (map! :map org-mode-map
        :leader
        :prefix "m"
        :n "B" #'org-babel-tangle)

  ;; headings
  (setq org-ellipsis " â–¼ "
        org-log-into-drawer t
        org-log-done 'time
        org-hide-emphasis-markers t)

  ;; font sizes for each header level in Org mode.
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))

  ;; refiling
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; archiving
  (setq org-archive-subtree-add-inherited-tags t)

  ;; publishing
  (setq org-publish-project-alist
        '(("github.io"
           :base-directory "~/projects/artemsmaznov.github.io/org"
           :base-extension "org"
           :publishing-directory "~/projects/artemsmaznov.github.io"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :auto-preamble t
           :exclude "header.org")))

  ;; e.g. [[arch-wiki:emacs][Emacs Page]]
  (setq org-link-abbrev-alist
        '(("arch-wiki" . "https://wiki.archlinux.org/title/")
          ("pacman"    . "https://archlinux.org/packages/?name=")
          ("aur"       . "https://aur.archlinux.org/packages/")
          ("github"    . "https://github.com/")
          ("google"    . "http://www.google.com/search?q=")
          ("brave"     . "https://search.brave.com/search?q=")
          ("wiki"      . "https://en.wikipedia.org/wiki/")
          ))

  (require 'org-tempo)
  ;; extra languages for src blocks
  (pushnew! org-structure-template-alist
            '("el" . "src emacs-lisp")
            '("js" . "src javascript")
            '("lu" . "src lua")
            '("py" . "src python")
            '("sh" . "src shell")
            '("ym" . "src yaml"))
  ;; extra org structure templates
  (pushnew! org-src-lang-modes
            '("conf-unix" . conf-unix)
            '("toml"      . conf-toml)))
#+end_src

** Org Agenda
#+begin_src emacs-lisp
(use-package! org-agenda
  :after org
  :config
  (map! :map org-agenda-mode-map
        :m "D"   #'org-agenda-day-view
        :m "W"   #'org-agenda-week-view
        :m "M"   #'org-agenda-month-view ;; doesn't work
        :m "T"   #'org-agenda-fortnight-view
        :m "C-h" #'org-agenda-earlier
        :m "C-l" #'org-agenda-later)

  (setq org-agenda-start-with-log-mode t
        org-agenda-start-day nil
        org-agenda-span 'week
        org-agenda-start-on-weekday 1
        org-deadline-warning-days 14))
#+end_src

** Org Bullets
#+begin_src emacs-lisp
(use-package! org-superstar
  :after org
  :hook (org-mode . org-superstar-mode))
#+end_src

** Org Auto Tangle
Put at the header of the =Org= document to enable auto tangle on save for it
#+begin_example emacs-lisp
#+auto_tangle: t
#+end_example

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :after org
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-babel-safelist
        '("README.org"
          "SHELLS.org"
          "local.org")))
#+end_src

** Ox
We need ox-man for "Org eXporting" to manpage format.
#+begin_src emacs-lisp
(after! org
  (use-package ox-man)
  (use-package ox-gemini))
#+end_src

* Office Tools
** AuthInfo
Setting up =~/.authinfo.gpg= with credentials
#+begin_example authinfo
machine smtp.gmail.com login example@gmail.com password eXaMpLePaSsWoRd port 465
#+end_example

** Presentations
#+begin_src emacs-lisp
(use-package! org-tree-slide
  :after org
  :init
  (map! :map org-mode-map
        :leader
        :prefix "t"
        :desc "Presentation" :e "p" #'org-tree-slide-mode)

  :hook ((org-tree-slide-play . my/presentation-start)
         (org-tree-slide-stop . my/presentation-end))

  :config
  (map! :map org-tree-slide-mode-map
        "C-h"   #'org-tree-slide-move-previous-tree
        "C-l"   #'org-tree-slide-move-next-tree
        "C-SPC" #'org-tree-slide-content)

  (setq
   org-tree-slide-activate-message "Presentation started!"
   org-tree-slide-deactivate-message "Presentation finished!"
   org-tree-slide-slide-in-effect t
   org-tree-slide-header t
   org-tree-slide-breadcrumbs " > "
   org-image-actual-width nil))
#+end_src

#+begin_src emacs-lisp
(defun my/presentation-start ()
  (writeroom-mode 1)
  (display-line-numbers-mode 0)
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images
  )

(defun my/presentation-end ()
  (writeroom-mode 0)
  (display-line-numbers-mode 1)
  )
#+end_src

** Calendar
*** CalFW
#+begin_src emacs-lisp
(use-package! calfw
  :init
  (map! :leader
        :prefix "o"
        :desc "Calendar" :e "c" #'cfw:open-org-calendar)

  :config
  (map! :map cfw:calendar-mode-map
        :m "zd" #'cfw:change-view-day
        :m "zw" #'cfw:change-view-week
        :m "zm" #'cfw:change-view-month
        :m "zt" #'cfw:change-view-two-weeks
        :m "T"  #'cfw:change-view-two-weeks) ;; not active due to evil-snipe and evil-find-char

  (setq
   calendar-week-start-day 1
   calendar-date-style 'european))
#+end_src

*** iCalendar
#+begin_src emacs-lisp
(use-package! icalendar
  :config
  (setq
   org-icalendar-use-scheduled '(event-if-todo event-if-not-todo todo-start)
   org-icalendar-use-deadline '(event-if-todo-not-done)))
#+end_src

*** CalDAV sync
#+begin_src emacs-lisp
(use-package! org-caldav
  :config
  (map! :map cfw:calendar-mode-map
        :leader
        :prefix "m"
        :n "S" #'org-caldav-sync)

  (setq
   org-caldav-delete-calendar-entries 'ask
   org-caldav-delete-org-entries 'always
   org-caldav-show-sync-results nil
   org-caldav-save-directory (expand-file-name ".caldav/" org-directory)
   org-caldav-backup-file (expand-file-name "backup.org" org-caldav-save-directory)
   org-caldav-location-newline-replacement ","
   org-caldav-exclude-tags '("nocal")
   org-caldav-calendars `(
     (:calendar-id "personal"
            :select-tags ("calgnr")
            :inbox (file+headline ,(expand-file-name "todo.org" org-directory) "Inbox")
            ;; :inbox ,(expand-file-name "inbox-personal.org" org-directory)
            :files (,(expand-file-name "todo.org" org-directory)
                    ,(expand-file-name "agenda.org" org-directory)
                    ,(expand-file-name "archive.org" org-directory)))
     (:calendar-id "housing"
            :select-tags ("calhsn")
            :inbox (file+headline ,(expand-file-name "todo.org" org-directory) "Inbox")
            ;; :inbox ,(expand-file-name "inbox-housing.org" org-directory)
            :files (,(expand-file-name "todo.org" org-directory)
                    ,(expand-file-name "housing.org" org-directory)
                    ,(expand-file-name "archive.org" org-directory)))
     (:calendar-id "work"
            :select-tags ("calwrk")
            :inbox (file+headline ,(expand-file-name "todo.org" org-directory) "Inbox")
            ;; :inbox ,(expand-file-name "inbox-work.org" org-directory)
            :files (,(expand-file-name "todo.org" org-directory)
                    ,(expand-file-name "archive.org" org-directory)))
     )))
#+end_src

** Email
*** mu4e
+ Arch Linux: ~$ pacman -S isync~
              ~$ paru -S mu~

A custom variable containing an email address string needs to be defined for each context
#+begin_example elisp
(defvar my/email/main "example@gmail.com" "My primary email address")
#+end_example

#+begin_src emacs-lisp
(use-package! mu4e
  :ensure nil
  :defer 20
  :config
  (map! :map mu4e-view-mode-map
        :n "m" #'mu4e-view-mark-for-something
        :n "M" #'mu4e-view-mark-for-move
        :n "t" #'mu4e-view-mark-subthread
        :n "T" #'mu4e-view-mark-thread)
  (map! :map mu4e-headers-mode-map
        :n "m" #'mu4e-headers-mark-for-something
        :n "M" #'mu4e-headers-mark-for-move
        :n "t" #'mu4e-headers-mark-subthread
        :n "T" #'mu4e-headers-mark-thread)

  (setq
   mu4e-update-interval (* 15 60) ;; auto-sync interval in seconds
   mu4e-maildir-shortcuts
   '(("/Inbox"             . ?i)
     ("/Work"              . ?w)
     ("/[Gmail]/Important" . ?I)
     ("/[Gmail]/Sent Mail" . ?s)
     ("/[Gmail]/Drafts"    . ?d)
     ("/[Gmail]/All Mail"  . ?a)
     ("/[Gmail]/Trash"     . ?t))
   +mu4e-header--maildir-colors
   '(("/Inbox"      . all-the-icons-yellow)
     ("/Work"       . all-the-icons-red)
     ("[Gmail]"     . all-the-icons-dgreen)))

  ;; headers - view listing the emails
  (setq
   mu4e-split-view 'vertical
   mu4e-headers-visible-columns 80
   mu4e-headers-time-format "%l:%M:%S %p"
   mu4e-headers-date-format "%e %b %Y"
   mu4e-headers-long-date-format "%a, %e %B %Y, %l:%M:%S %p"
   ;; colum layout for mail list
   mu4e-headers-fields
   '((:account-stripe . 1)
     (:flags          . 7)
     (:human-date     . 12)
     (:from-or-to     . 25)
     (:thread-subject . nil)))

  ;; message
  (setq
   ;; mu4e-view-date-format "%c"
   ;; mu4e-date-format-long "%c"
   message-kill-buffer-on-exit t) ;; don't keep message buffers

  ;; composing
  (setq
   mu4e-compose-format-flowed t ;; use html formatting for outgoing emails
   mu4e-compose-dont-reply-to-self t)

  ;; contexts
  (setq
   user-full-name "Artem Smaznov"
   mu4e-context-policy 'pick-first
   mu4e-compose-context-policy 'ask-if-none
   ;; mu4e-index-cleanup nil ;; don't need to run cleanup after indexing for gmail
   ;; mu4e-index-lazy-check t ;; because gmail uses labels as folders we can use lazy check since messages don't really "move"
   mu4e-contexts
   `(
     ;; ,(make-mu4e-context
     ;;   :name "Artem"
     ;;   :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg :to my/email/artem)))
     ;;   :vars `((smtpmail-smtp-server  . "smtp.gmail.com")
     ;;           (smtpmail-smtp-service . 465)
     ;;           (smtpmail-stream-type  . ssl)
     ;;           (user-mail-address     . ,my/email/artem)
     ;;           (mu4e-drafts-folder    . "/[Gmail]/Drafts")
     ;;           (mu4e-sent-folder      . "/[Gmail]/Sent Mail")
     ;;           (mu4e-refile-folder    . "/[Gmail]/All Mail")
     ;;           (mu4e-trash-folder     . "/[Gmail]/Trash")))
     ,(make-mu4e-context
       :name "Main"
       :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg :to my/email/main)))
       ;; :match-func (lambda (msg) (when msg (string-prefix-p "/Main" (mu4e-message-field msg :maildir))))
       :vars `((user-mail-address  . ,my/email/main)
               (mu4e-drafts-folder . "/[Gmail]/Drafts")
               (mu4e-sent-folder   . "/[Gmail]/Sent Mail")
               (mu4e-refile-folder . "/[Gmail]/All Mail")
               (mu4e-trash-folder  . "/[Gmail]/Trash")))))

     ;; start mu4e in the background so it auto-syncs emails
     (mu4e t)

     ;; modeline
     (setq
      mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed AND NOT maildir:\"/[Gmail]/All Mail\""
      mu4e-display-update-status-in-modeline t))
#+end_src

*** Authentication
Function used by =mbsync= for authentication with the email server
#+begin_src emacs-lisp
(defun my/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
        nil)))
#+end_src

** Ledger
#+begin_src emacs-lisp
(use-package! ledger-mode
  :config
  (map! :map ledger-mode-map
        :leader
        :prefix "m"
        :e "c" #'ledger-mode-clean-buffer)

  (setq ledger-default-date-format "%Y-%m-%d"))
#+end_src

* Development Tools
** Magit
#+begin_src emacs-lisp
(use-package! magit
  :config
  (setq
   magit-revision-show-gravatars t ;; enable gravatars
   ;; magit-display-buffer-function 'magit-display-buffer-traditional ;; open magit in a side window

   ;; enable granular diff-highlights for all hunks
   ;; change to t if performance is bad
   magit-diff-refine-hunk 'all))
#+end_src

Show list of to-do items in Magit status buffer
#+begin_src emacs-lisp
(use-package! magit-todos
  :after magit
  :hook
  (magit-mode . magit-todos-mode))
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package! projectile
  :init
  (setq projectile-switch-project-action #'projectile-dired)
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects"))))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package! lsp-treemacs
  :commands lsp-treemacs-errors-list)
#+end_src

** Completion
#+begin_src emacs-lisp
(use-package! company
  :config
  (map! :after lsp-mode
        :map lsp-mode-map
        :i "<tab>" #'company-indent-or-complete-common)

  (setq
   company-idle-delay 0.5
   company-tooltip-idle-delay 2
   company-minimum-prefix-length 1))
#+end_src

** Ivy
#+begin_src emacs-lisp
(use-package! lsp-ivy
  :commands lsp-ivy-workspace-symbol)
#+end_src

** Rotate Text
To enable a set of items to cycle through globally, add the following to your configuration
#+begin_src emacs-lisp
(use-package! rotate-text
  :config
  (pushnew! rotate-text-words
            '("on" "off")
            '("yes" "no")))
#+end_src

** Indent Guides
#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :defer t
  :config
  (setq highlight-indent-guides-method 'fill))
#+end_src

** Rainbow Mode
Highlight colors in file
#+begin_src emacs-lisp
(use-package! rainbow-mode
  :init
  (map! :leader
        :prefix "t"
        :desc "Colors" :e "c" #'rainbow-mode))
#+end_src

* LSP
** LSP Mode
#+begin_src emacs-lisp
(use-package! lsp-mode
  :commands (lsp lsp-deferred)
  :hook
  (rjsx-mode    . lsp-deferred)
  (python-mode  . lsp-deferred)
  (feature-mode . lsp-deferred)
  (vimrc-mode   . lsp-deferred)
  (groovy-mode  . lsp-deferred))
#+end_src

See [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][this]] for LSP UI elements and their respective variables
#+begin_src emacs-lisp
(use-package! lsp-ui
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq
   lsp-ui-doc-position 'bottom
   lsp-headerline-breadcrumb-enable t))
#+end_src

** JavaScript
#+begin_src emacs-lisp
;; (use-package! rjsx-mode
;;   :ensure t
;;   :mode
;;   "\\.js\\'"
;; )
#+end_src

** Python
+ macOS: ~$ brew install pyright~
+ Arch Linux: ~$ pacman -S pyright~

** Groovy
#+begin_src emacs-lisp
(use-package! groovy-mode
  :defer t
  :mode
  "\\.pipe\\'"
  "\\.PIPE\\'"

  :hook (groovy-mode . (lambda () (rainbow-delimiters-mode 1)))

  :config
  (setq groovy-indent-offset 2))
#+end_src

** Cucumber
#+begin_src emacs-lisp
(use-package! feature-mode
  :defer t
  :mode "\\.feature\\'"

  :config
  (setq
   feature-default-language "en"
   ;; feature-step-search-path "features/../**/*step*/*.js"
   ))
#+end_src

** Vim
Enable syntax highlighting for .vim files
#+begin_src emacs-lisp
(use-package! vimrc-mode
  :defer t
  :mode "\\.vim\\(rc\\)?\\'"

  :config
  (setq evil-shift-width 2))
#+end_src

** Logs
#+begin_src emacs-lisp
(use-package! syslog-mode
  :defer t
  :mode
  "\\.log"
  "\\.[0-9]+\\'"

  :hook
  (syslog-mode . (lambda ()
                   (make-local-variable 'display-line-numbers-type)
                   (setq display-line-numbers-type t)
                   (display-line-numbers-mode 1)
                   )))
#+end_src

* Spell Checking
+ macOS: ~$ brew install aspell~
+ Arch Linux: ~$ pacman -S aspell aspell-en aspell-ru~
#+begin_src emacs-lisp
(use-package! spell-fu
  :hook
  (spell-fu-mode . (lambda ()
                     (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "ru"))
                     (spell-fu-dictionary-add (spell-fu-get-personal-dictionary "ru"      (expand-file-name "dict/ru.pws" (xdg-data-home))))
                     (spell-fu-dictionary-add (spell-fu-get-personal-dictionary "finance" (expand-file-name "dict/finance.en.pws" (xdg-data-home))))
                     ))

  :config
  (setq
   ispell-dictionary "english"
   ispell-personal-dictionary (expand-file-name "dict/en.pws" (xdg-data-home))))
#+end_src

* Global Keybindings
Buffers and Bookmarks
#+begin_src emacs-lisp
(map! :leader
      :prefix "b"
      ;; :desc "Clone indirect buffer other window" "c" #'clone-indirect-buffer-other-window
      :desc "List bookmarks"                          :e "L" #'list-bookmarks
      :desc "Save current bookmarks to bookmark file" :e "w" #'bookmark-save)
#+end_src

Inserts
#+begin_src emacs-lisp
(map! :leader
      :prefix "i"
      :desc "Toilet pagga" :e "t" (cmd! (evil-ex "R!toilet -f pagga ")))
#+end_src

Toggles
#+begin_src emacs-lisp
(map! :leader
      :prefix "t"
      :desc "Fill column indicator" :e "|" #'global-display-fill-column-indicator-mode
      :desc "Toggle scroll bars"    :e "S" #'scroll-bar-mode)
#+end_src

Workspaces
#+begin_src emacs-lisp
(map! :leader
      :prefix "TAB"
      :desc "Move workspace left"  :e "<" #'+workspace/swap-left
      :desc "Move workspace right" :e ">" #'+workspace/swap-right)
#+end_src

* Local Overwrite
Load custom configuration overwrites from and external file
#+begin_src emacs-lisp
(when (file-exists-p (expand-file-name "local.el" doom-private-dir))
  (load! (expand-file-name "local.el" doom-private-dir))
  )
#+end_src

* Additional Notes
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

#+begin_example emacs-lisp
(after! PACKAGE
    (setq x y))
#+end_example

The exceptions to this rule:

- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
this file. Emacs searches the `load-path' when you load packages with
`require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
